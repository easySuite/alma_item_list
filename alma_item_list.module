<?php
/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function alma_item_list_menu() {
  $items = array();
  $items['alma_item_list'] = array(
    'title' => 'Get items for list',
    'page callback' => 'alma_item_list_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function alma_item_list_theme($existing, $type, $theme, $path) {
  drupal_add_css(drupal_get_path('module', 'alma_item_list') . '/css/alma_item_list.css', array('type' => 'file'));
  $hooks = array();

  $hooks['alma_item_list_list'] = array(
    'variables' => array(),
    'template' => 'alma-item-list_item-list',
    'path' => $path . '/templates',
  );

  $hooks['alma_item_list_item'] = array(
    'variables' => array(),
    'template' => 'alma-item-list_item',
    'path' => $path . '/templates',
  );

  return $hooks;
}

/**
 * Pass ajax loaded content as json output.
 */
function alma_item_list_ajax() {
  if (!empty($_GET['content']) && count($_GET['content']) > 2) {
    list($query, $limit, $cache) = array_values($_GET['content']);
    $content = alma_item_list_get_content($query, $limit, $cache);
  }
  else {
  $content = array();
    watchdog('alma_item_list', t('Wrong parameters are passed from the query'));
  }

  // Generate markup for each item.
  $items = array();
  foreach ($content as $v) {
    $items[] = theme('alma_item_list_item', $v);
  }
  $markup = theme('alma_item_list_list', array('items' => implode('', $items)));

  drupal_json_output($markup);
}

/**
 * Get ting objects based on query and limit.
 *
 * @param string $query
 *   Search query string.
 * @param int $limit
 *   Number of searched items.
 * @param int $cache
 *   Cache time.
 *
 * @return array
 *   Ting objects array.
 */
function alma_item_list_get_content($query, $limit, $cache) {
  module_load_include('inc', 'ting', 'ting.client');
  module_load_include('inc', 'ting_covers', 'ting_covers.pages');

  $cache_ttl = isset($cache) ? $cache : ALMA_ITEM_LIST_DEFAULT_CACHE_TTL;
  $items = array();
  $page = 0;

  $render = array();

  $cid = 'alma_item_list-' . md5($query . $limit . $page);
  $cache = cache_get($cid, 'cache');
  if (!empty($cache->data)) {
    $render = $cache->data;
  }
  else {
    try {
      $result = alma_client_invoke(
        'run_lms_search',
        $query,
        'native',
        0,
        200
      );
    }
    catch (AlmaClientHTTPError $e) {
      watchdog_exception('ding_item_list', $e);

      return (object) array('content' => '');
    }

    array_walk($result['items'], function (&$v, $k) {
      $v = '870970-basis:' . $v;
    });

    $objects = ting_get_objects($result['items']);
    $cover_data = array();
    $items_tmp = array();

    foreach ($objects as $object) {
      if (!is_object($object)) {
        continue;
      }
      $faust = explode(':', $object->id);
      $items_tmp[$faust[1]] = $object;

      $cover_data[] = array(
        'local_id' => $faust[1],
        'owner_id' => $faust[0],
        'image_style' => 'item_list',
      );
    }

    $covers = ting_covers_objects(FALSE, $cover_data);

    // Assign covers.
    foreach ($covers as $v) {
      if (!isset($v['urls']['detail'])) {
        continue;
      }

      $items[$v['local_id']] = array(
        'cover' => $v['urls']['detail'],
        'object' => $items_tmp[$v['local_id']],
      );
      // Exit search loop if we have reached limit.
      if (count($items) == $limit) {
        break;
      }
    }

    // Process items, load entities, voxb, etc.
    foreach ($items as $item) {
      $faust = explode(':', $item['object']->id);
      $ding_entity = ding_entity_load($item['object']->id);

      $reservation_form = module_invoke_all(
        'ding_entity_buttons',
        'ding_entity',
        $ding_entity,
        'ajax'
      );

      $render[$faust[1]] = array(
        'local_id' => $faust[1],
        'faust' => $ding_entity->ding_entity_id,
        'cover' => $item['cover'],
        'title' => $ding_entity->title,
        'author' => isset($ding_entity->creators[0]) ? $ding_entity->creators[0] : '',
        'year' => $ding_entity->date,
        'loan_form' => drupal_render($reservation_form),
        'has_rating' => FALSE,
        'rating' => 0,
        'rating_count' => 0,
        'review_count' => 0,
      );

      if (module_exists('ding_voxb') && isset($ding_entity->isbn[0])) {
        $isbn = $ding_entity->isbn[0];
        $voxb_details = new VoxbItems();
        $voxb_details->addReviewHandler('review', new VoxbReviews());
        $voxb_details->fetchByISBN(array($isbn));
        $detail = $voxb_details->getItem($isbn);

        if ($detail) {
          $voxb = array(
            'has_rating' => TRUE,
            'rating' => (int) round($detail->getRating() / 20),
            'rating_count' => $detail->getRatingCount(),
            'review_count' => $detail->getReviews('review')->getCount(),
          );
          $render[$faust[1]] += $voxb;
        }
      }
    }

    cache_set($cid, $render, 'cache', time() + $cache_ttl);
  }

  return $render;
}

/**
 * Implements hook_entity_info_alter().
 */
function alma_item_list_entity_info_alter(&$entity_info) {
  $entity_info['ting_object']['view modes'] += array(
    'item_list' => array(
      'label' => t('Item list'),
      'custom settings' => TRUE,
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * Tells CTools (and thus Panels) where to look for plugin code.
 */
function alma_item_list_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_image_default_styles().
 */
function alma_item_list_image_default_styles() {
  $styles = array();

  // Exported image style: item_list.
  $styles['item_list'] = array(
    'name' => 'item_list',
    'effects' => array(
      1 => array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width' => '50',
          'height' => '',
          'upscale' => 1,
        ),
        'weight' => '1',
      ),
    ),
  );

  return $styles;
}
